using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace _291CarProject
{
    public partial class AURScreen : Form
    {
        public AURScreen()
        {
            InitializeComponent();
        }

        private void BackButton_Click(object sender, EventArgs e)
        {
            this.Hide();

            MainMenu mainMenu = new MainMenu();

            mainMenu.Show();
        }

        /* ========================================================================================
         * Add Side
         * In Add, we add a new vehicle to our database.
         * The vehicle ID is generated by this script
         * All input fields are required; we cannot have an empty or null value.
        ======================================================================================= */
        private void AddConfirm_Click(object sender, EventArgs e)
        {
            // If any of our inputs are illegal, end the function immediately
            if (!InputCheck_Add()) { return; }

            int newID = FindNewID(); // Create an ID for our new vehicle
            int newYear = int.Parse(TB_AddYear.Text);
            int newMilage = int.Parse(TB_AddMilage.Text);

            try
            {
                // Build the command text here
                _291CarProject.Static.Database.commandStream.CommandText = "insert into Vehicle values " + 
                    "(" + newID + ",'" + TB_AddModel.Text + ",'" + DD_AddSize.Text + "'," + newYear + "'," + newMilage + ")";
                // Send it along to the server
                _291CarProject.Static.Database.commandStream.ExecuteNonQuery();
            }
            // Error catching
            catch (Exception e2)
            {
                MessageBox.Show(e2.ToString(), "Error");
            }
        }

        private bool InputCheck_Add()
        {
            string message;
            // Check to see if any of our fields are empty.
            if (TB_AddModel.Text == "" ||
                DD_AddSize.Text == "" ||
                TB_AddYear.Text == "" ||
                TB_AddMilage.Text == "")
            {
                // If any of them are empty, return an 'error' message
                message = "One or more mandatory fields are empty." +
                    "\r\nPlease make sure all fields are filled out before" +
                    "\r\nadding a new entry.";
                MessageBox.Show(message);
                return false; // End the function here.
            }

            // Check that the year and milage are legal int values
            int yearCheck = int.Parse(TB_AddYear.Text);
            int milageCheck = int.Parse(TB_AddMilage.Text);

            // Check if year and/or milage have a char in them
            if (yearCheck == 0 || milageCheck == 0)
            {
                message = "Year and/or Milage possess illegal values." +
                    "\r\nPlease make sure these fields are integers.";
                MessageBox.Show(message);
                return false; // End the function here.
            }

            // Else, return true
            return true;
        }

        private int FindNewID()
        {
            int newVID = 0; // Our new vehicle entry's ID
            int latestVID; // the last VID we've given out

            // Build the command text here
            _291CarProject.Static.Database.commandStream.CommandText = "select max(vehicleID) from Vehicle";

            try
            {
                // Run and grab the result from the dataStream
                _291CarProject.Static.Database.commandStream.ExecuteNonQuery();
                _291CarProject.Static.Database.dataStream.Read(); // Read
                // Turn the vehicleID to an int using Parse
                latestVID = int.Parse(_291CarProject.Static.Database.dataStream["vehicleID"].ToString());

                // Check if we got a result for a "max" vID
                // If there are no vehicles in the system, make this vehicle the very 1st
                if (latestVID.Equals(0)) { newVID = 0001; }
                else { newVID = latestVID + 1; }

                // Return
                return newVID;
            }
            // Error catching
            catch (Exception e2)
            {
                MessageBox.Show(e2.ToString(), "Error");
            }

            return newVID;
        }

        /* ========================================================================================
         * Update Side
         * In Update, we can change values for a vehicle.
         * If a field is left empty, we assume it is NOT to be updated and thus
         * will be left alone
         ======================================================================================= */
        private void UpdateButton_Click(object sender, EventArgs e)
        {
            // If any of our inputs are illegal, end the function immediately
            if (!InputCheck_Update()) { return; }

            try
            {
                bool cFlag = false; // The comma flag, used to tell when to add a comma , to the query
                // Build the command text step-by-step here
                _291CarProject.Static.Database.commandStream.CommandText = "Update Vehicle set";

                // Check for an update to the car's model
                if (TB_UpdateModel.Text != "")
                {
                    _291CarProject.Static.Database.commandStream.CommandText += "model = " + TB_UpdateModel.Text;
                    cFlag = true; // Set the comma flag to true
                }
                // Check for an update to the car's size
                if (DD_UpdateSize.Text != "")
                {
                    // If we added a change to the model, make sure to add a comma here
                    if (cFlag) 
                    { 
                        _291CarProject.Static.Database.commandStream.CommandText += ",";
                        cFlag = false;
                    }
                    _291CarProject.Static.Database.commandStream.CommandText += "size = " + DD_UpdateSize.Text;
                    cFlag = true;
                }
                // Check for an update to the car's year
                if (TB_UpdateYear.Text != "")
                {
                    if (cFlag)
                    {
                        _291CarProject.Static.Database.commandStream.CommandText += ",";
                        cFlag = false;
                    }
                    int yearCheck = int.Parse(TB_UpdateYear.Text);
                    _291CarProject.Static.Database.commandStream.CommandText += "size = " + DD_UpdateSize.Text;
                    cFlag = true;
                }
                // Check for an update to the car's milage
                if (TB_UpdateMilage.Text != "")
                {
                    // No point setting cFlag to false here cause it's the last field we check
                    if (cFlag) { _291CarProject.Static.Database.commandStream.CommandText += ","; }
                    int milageCheck = int.Parse(TB_UpdateMilage.Text);
                    _291CarProject.Static.Database.commandStream.CommandText += "size = " + DD_UpdateSize.Text;
                }

                // Finally, add the Where statement
                int vID = int.Parse(TB_UpdateID.Text);
                _291CarProject.Static.Database.commandStream.CommandText += "where vehicleID = " + vID;
                _291CarProject.Static.Database.commandStream.ExecuteNonQuery(); // run the query and update the entry
            }
            // Error catching
            catch (Exception e2)
            {
                MessageBox.Show(e2.ToString(), "Error");
            }
        }

        private bool InputCheck_Update()
        {
            if (!VIDCheck(TB_UpdateID.Text)) { return false; }

            string message; // Used for error messages

            // Check to see if ALL fields are empty.
            if (TB_UpdateModel.Text == "" &
                DD_UpdateSize.Text == "" &
                TB_UpdateYear.Text == "" &
                TB_UpdateMilage.Text == "")
            {
                // For this one, we just return false
                return false; // End the function here.
            }

            // Check that the year and milage are legal int values
            // This time, we do it seperately cause one might not be updated
            if (TB_UpdateYear.Text != "")
            {
                int yearCheck = int.Parse(TB_UpdateYear.Text);
                if (yearCheck == 0)
                {
                    message = "Illegal value in the Year field." +
                    "\r\nPlease make sure this field is an integer.";
                    MessageBox.Show(message);
                    return false; // End the function here.
                }
            }
            if (TB_UpdateMilage.Text != "")
                {
                    int yearCheck = int.Parse(TB_UpdateMilage.Text);
                    if (yearCheck == 0)
                    {
                        message = "Illegal value in the Milage field." +
                            "\r\nPlease make sure this field is an integer.";
                        MessageBox.Show(message);
                        return false; // End the function here.
                    }
                }

            // Else, return true
            return true;
        }

        /* ========================================================================================
         * Remove Side
         * In Update, we receive a vehicle ID and remove its entry from the Vehicle table
         * An existing vehicle ID is required for this to work.
         ======================================================================================= */
        private void RemoveButton_Click(object sender, EventArgs e)
        {
            // If any of our inputs are illegal, end the function immediately
            if (!InputCheck_Remove()) { return; }

            try
            {
                // Finally, add the Where statement
                int vID = int.Parse(TB_UpdateID.Text);
                _291CarProject.Static.Database.commandStream.CommandText = "delete from Vehicle where vehicleID = " + vID;
                _291CarProject.Static.Database.commandStream.ExecuteNonQuery(); // run the query and update the entry
            }
            // Error catching
            catch (Exception e2)
            {
                MessageBox.Show(e2.ToString(), "Error");
            }
        }

        private bool InputCheck_Remove()
        {
            return VIDCheck(TB_RemoveVID.Text);
        }

        private bool VIDCheck(string vID)
        {
            // Get our sought-after ID as an int
            int vIDCheck = int.Parse(vID);
            string message; // Used for error messages

            try
            {
                // Check to see that we've been given an ID OR that the ID exists in the database
                _291CarProject.Static.Database.commandStream.CommandText = "select * from Vehicle where vehicleID = " + vIDCheck;
                // Run and grab the result from the dataStream
                _291CarProject.Static.Database.commandStream.ExecuteNonQuery();
                _291CarProject.Static.Database.dataStream.Read(); // Read
                // Turn the vehicleID to an int using Parse
                int readVID = int.Parse(_291CarProject.Static.Database.dataStream["vehicleID"].ToString());

                // Run the check here
                if (TB_UpdateID.Text == "" || readVID == 0)
                {
                    message = "Vehicle ID either empty or not-existent." +
                        "\r\nPlease give an existing vehicle ID to update.";
                    MessageBox.Show(message);
                    return false; // End the function here.
                }

                // Else, return true
                return true;
            }
            // Error catching
            catch (Exception e2)
            {
                MessageBox.Show(e2.ToString(), "Error");
            }
            // We have to return something out here
            return false;
        }
    }
}
